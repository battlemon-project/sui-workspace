version: "3.9"
services:
  nginx:
    container_name: nginx
    build:
      context: .
      dockerfile: docker/nginx.Dockerfile
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - certbot_letsencrypt:/etc/letsencrypt:ro
      - certbot_acme:/tmp/.well-known/acme-challenge
    configs:
      - source: nginx
        target: /etc/nginx/conf.d/default.conf
    restart: always
    depends_on:
      backend:
        condition: service_healthy

  certbot:
    container_name: certbot
    build:
      context: .
      dockerfile: docker/certbot.Dockerfile
    environment:
      - CERTBOT_RENEW=true
      - DOMAIN=api.battlemon.com
    volumes:
      - certbot_letsencrypt:/etc/letsencrypt/
      - certbot_acme:/tmp/.well-known/acme-challenge
    depends_on:
      - nginx

  indexer:
    container_name: indexer
    build:
      context: .
      dockerfile: docker/project.Dockerfile
      target: indexer
    environment:
      - APP_ENV=production
    configs:
      - source: indexer
        target: /app/config/production.toml
    depends_on:
      backend:
        condition: service_healthy

  backend:
    container_name: backend
    build:
      context: .
      dockerfile: docker/project.Dockerfile
      target: backend
    ports:
      - "8001:8000"
    environment:
      - APP_ENV=production
    configs:
      - source: backend
        target: /app/config/production.toml
    depends_on:
      migrator:
        condition: service_completed_successfully
    restart: always
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8000/healthcheck" ]
      interval: 10s
      timeout: 5s
      start_period: 10s

  migrator:
    container_name: migrator
    build:
      context: .
      dockerfile: docker/project.Dockerfile
    depends_on:
      db:
        condition: service_healthy

  db:
    container_name: db
    image: postgres:15.1
    ports:
      - "5433:5432"
    environment:
      POSTGRES_DB: "indexer_db"
      POSTGRES_USER: "postgres"
      POSTGRES_PASSWORD: "password"
      PGDATA: "/var/lib/postgresql/data/pgdata"
    volumes:
      - ./postgres_data:/var/lib/postgresql/data
    restart: always
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "postgres" ]
      interval: 10s
      timeout: 5s
      start_period: 10s

configs:
  backend:
    file: config/backend_production.toml
  indexer:
    file: config/indexer_production.toml
  nginx:
    file: config/nginx.conf

volumes:
  certbot_letsencrypt:
  certbot_acme:

networks:
  monnet:
    attachable: true